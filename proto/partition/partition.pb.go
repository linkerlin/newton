// Code generated by protoc-gen-go.
// source: partition.proto
// DO NOT EDIT!

/*
Package partition is a generated protocol buffer package.

It is generated from these files:
	partition.proto

It has these top-level messages:
	DenunciateRequest
	AlivenessResponse
	Dummy
	Member
	PartitionsOfMember
	PartitionTable
*/
package partition

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DenunciateRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *DenunciateRequest) Reset()                    { *m = DenunciateRequest{} }
func (m *DenunciateRequest) String() string            { return proto.CompactTextString(m) }
func (*DenunciateRequest) ProtoMessage()               {}
func (*DenunciateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DenunciateRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AlivenessResponse struct {
	Birthdate int64 `protobuf:"varint,1,opt,name=birthdate" json:"birthdate,omitempty"`
}

func (m *AlivenessResponse) Reset()                    { *m = AlivenessResponse{} }
func (m *AlivenessResponse) String() string            { return proto.CompactTextString(m) }
func (*AlivenessResponse) ProtoMessage()               {}
func (*AlivenessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AlivenessResponse) GetBirthdate() int64 {
	if m != nil {
		return m.Birthdate
	}
	return 0
}

type Dummy struct {
}

func (m *Dummy) Reset()                    { *m = Dummy{} }
func (m *Dummy) String() string            { return proto.CompactTextString(m) }
func (*Dummy) ProtoMessage()               {}
func (*Dummy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Member struct {
	Address   string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Birthdate int64  `protobuf:"varint,2,opt,name=birthdate" json:"birthdate,omitempty"`
}

func (m *Member) Reset()                    { *m = Member{} }
func (m *Member) String() string            { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()               {}
func (*Member) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Member) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Member) GetBirthdate() int64 {
	if m != nil {
		return m.Birthdate
	}
	return 0
}

type PartitionsOfMember struct {
	Partitions []int32 `protobuf:"varint,1,rep,packed,name=partitions" json:"partitions,omitempty"`
}

func (m *PartitionsOfMember) Reset()                    { *m = PartitionsOfMember{} }
func (m *PartitionsOfMember) String() string            { return proto.CompactTextString(m) }
func (*PartitionsOfMember) ProtoMessage()               {}
func (*PartitionsOfMember) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PartitionsOfMember) GetPartitions() []int32 {
	if m != nil {
		return m.Partitions
	}
	return nil
}

type PartitionTable struct {
	Partitions map[int32]string               `protobuf:"bytes,1,rep,name=partitions" json:"partitions,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Members    map[string]*PartitionsOfMember `protobuf:"bytes,2,rep,name=members" json:"members,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sorted     []*Member                      `protobuf:"bytes,3,rep,name=sorted" json:"sorted,omitempty"`
}

func (m *PartitionTable) Reset()                    { *m = PartitionTable{} }
func (m *PartitionTable) String() string            { return proto.CompactTextString(m) }
func (*PartitionTable) ProtoMessage()               {}
func (*PartitionTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PartitionTable) GetPartitions() map[int32]string {
	if m != nil {
		return m.Partitions
	}
	return nil
}

func (m *PartitionTable) GetMembers() map[string]*PartitionsOfMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *PartitionTable) GetSorted() []*Member {
	if m != nil {
		return m.Sorted
	}
	return nil
}

func init() {
	proto.RegisterType((*DenunciateRequest)(nil), "partition.DenunciateRequest")
	proto.RegisterType((*AlivenessResponse)(nil), "partition.AlivenessResponse")
	proto.RegisterType((*Dummy)(nil), "partition.Dummy")
	proto.RegisterType((*Member)(nil), "partition.Member")
	proto.RegisterType((*PartitionsOfMember)(nil), "partition.PartitionsOfMember")
	proto.RegisterType((*PartitionTable)(nil), "partition.PartitionTable")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Partition service

type PartitionClient interface {
	Aliveness(ctx context.Context, in *Dummy, opts ...grpc.CallOption) (*AlivenessResponse, error)
	DenunciateForMember(ctx context.Context, in *DenunciateRequest, opts ...grpc.CallOption) (*Dummy, error)
	SetPartitionTable(ctx context.Context, in *PartitionTable, opts ...grpc.CallOption) (*Dummy, error)
}

type partitionClient struct {
	cc *grpc.ClientConn
}

func NewPartitionClient(cc *grpc.ClientConn) PartitionClient {
	return &partitionClient{cc}
}

func (c *partitionClient) Aliveness(ctx context.Context, in *Dummy, opts ...grpc.CallOption) (*AlivenessResponse, error) {
	out := new(AlivenessResponse)
	err := grpc.Invoke(ctx, "/partition.Partition/Aliveness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionClient) DenunciateForMember(ctx context.Context, in *DenunciateRequest, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := grpc.Invoke(ctx, "/partition.Partition/DenunciateForMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionClient) SetPartitionTable(ctx context.Context, in *PartitionTable, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := grpc.Invoke(ctx, "/partition.Partition/SetPartitionTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Partition service

type PartitionServer interface {
	Aliveness(context.Context, *Dummy) (*AlivenessResponse, error)
	DenunciateForMember(context.Context, *DenunciateRequest) (*Dummy, error)
	SetPartitionTable(context.Context, *PartitionTable) (*Dummy, error)
}

func RegisterPartitionServer(s *grpc.Server, srv PartitionServer) {
	s.RegisterService(&_Partition_serviceDesc, srv)
}

func _Partition_Aliveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dummy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServer).Aliveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.Partition/Aliveness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServer).Aliveness(ctx, req.(*Dummy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Partition_DenunciateForMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenunciateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServer).DenunciateForMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.Partition/DenunciateForMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServer).DenunciateForMember(ctx, req.(*DenunciateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Partition_SetPartitionTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServer).SetPartitionTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.Partition/SetPartitionTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServer).SetPartitionTable(ctx, req.(*PartitionTable))
	}
	return interceptor(ctx, in, info, handler)
}

var _Partition_serviceDesc = grpc.ServiceDesc{
	ServiceName: "partition.Partition",
	HandlerType: (*PartitionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Aliveness",
			Handler:    _Partition_Aliveness_Handler,
		},
		{
			MethodName: "DenunciateForMember",
			Handler:    _Partition_DenunciateForMember_Handler,
		},
		{
			MethodName: "SetPartitionTable",
			Handler:    _Partition_SetPartitionTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "partition.proto",
}

func init() { proto.RegisterFile("partition.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x93, 0x41, 0x4f, 0xc2, 0x40,
	0x10, 0x85, 0x69, 0x9b, 0x42, 0x3a, 0x18, 0xa1, 0xab, 0x87, 0xda, 0xa0, 0x31, 0x3d, 0x18, 0x38,
	0x48, 0x22, 0x78, 0x30, 0x26, 0x24, 0x68, 0x50, 0xe3, 0xc1, 0x68, 0x56, 0x2f, 0x1e, 0x5b, 0x3b,
	0xc6, 0x46, 0xda, 0xe2, 0xee, 0x96, 0x84, 0x5f, 0xea, 0xdd, 0x5f, 0x62, 0x68, 0x4b, 0xbb, 0x50,
	0xb8, 0x31, 0x93, 0x79, 0x1f, 0x6f, 0x67, 0x5e, 0xa1, 0x35, 0x73, 0x99, 0x08, 0x44, 0x10, 0x47,
	0xfd, 0x19, 0x8b, 0x45, 0x4c, 0x8c, 0xa2, 0xe1, 0x9c, 0x83, 0x39, 0xc1, 0x28, 0x89, 0x3e, 0x02,
	0x57, 0x20, 0xc5, 0x9f, 0x04, 0xb9, 0x20, 0x16, 0x34, 0x5c, 0xdf, 0x67, 0xc8, 0xb9, 0xa5, 0x9c,
	0x2a, 0x5d, 0x83, 0xae, 0x4a, 0xe7, 0x02, 0xcc, 0x9b, 0x69, 0x30, 0xc7, 0x08, 0x39, 0xa7, 0xc8,
	0x67, 0x71, 0xc4, 0x91, 0x74, 0xc0, 0xf0, 0x02, 0x26, 0xbe, 0x7c, 0x57, 0x60, 0x2a, 0xd0, 0x68,
	0xd9, 0x70, 0x1a, 0xa0, 0x4f, 0x92, 0x30, 0x5c, 0x38, 0x63, 0xa8, 0x3f, 0x61, 0xe8, 0x21, 0xdb,
	0xcd, 0x5f, 0x47, 0xa9, 0x9b, 0xa8, 0x4b, 0x20, 0x2f, 0x2b, 0xe7, 0xfc, 0xf9, 0x33, 0xa7, 0x9d,
	0x00, 0x14, 0xef, 0x59, 0x02, 0xb5, 0xae, 0x4e, 0xa5, 0x8e, 0xf3, 0xa7, 0xc2, 0x7e, 0x21, 0x7b,
	0x73, 0xbd, 0x29, 0x92, 0xc7, 0x8a, 0xa4, 0x39, 0xe8, 0xf5, 0xcb, 0x35, 0xad, 0x8f, 0x97, 0x25,
	0xbf, 0x8b, 0x04, 0x5b, 0xc8, 0x74, 0x32, 0x86, 0x46, 0x98, 0xfa, 0xe0, 0x96, 0x9a, 0x72, 0xce,
	0x76, 0x73, 0x32, 0xc3, 0x39, 0x64, 0x25, 0x23, 0x3d, 0xa8, 0xf3, 0x98, 0x09, 0xf4, 0x2d, 0x2d,
	0x05, 0x98, 0x12, 0x20, 0x53, 0xd0, 0x7c, 0xc0, 0x1e, 0x41, 0x6b, 0xc3, 0x0b, 0x69, 0x83, 0xf6,
	0x8d, 0x8b, 0x74, 0x8f, 0x3a, 0x5d, 0xfe, 0x24, 0x87, 0xa0, 0xcf, 0xdd, 0x69, 0x92, 0xed, 0xcf,
	0xa0, 0x59, 0x71, 0xad, 0x5e, 0x29, 0xf6, 0x3b, 0xec, 0xc9, 0x16, 0x64, 0xad, 0x91, 0x69, 0x87,
	0xb2, 0xb6, 0x39, 0x38, 0xde, 0xf6, 0x96, 0x62, 0xf3, 0x12, 0x7a, 0xf0, 0xab, 0x80, 0x51, 0x4c,
	0x90, 0x11, 0x18, 0x45, 0x4c, 0x48, 0x5b, 0x82, 0xa4, 0x49, 0xb0, 0x3b, 0x52, 0xa7, 0x12, 0x27,
	0xa7, 0x46, 0x1e, 0xe0, 0xa0, 0x0c, 0xe5, 0x7d, 0xcc, 0xf2, 0x43, 0xcb, 0xb2, 0x4a, 0x68, 0xed,
	0xca, 0xdf, 0x38, 0x35, 0x72, 0x0b, 0xe6, 0x2b, 0x8a, 0x8d, 0xe3, 0x1f, 0xed, 0x3c, 0xd0, 0x36,
	0x86, 0x57, 0x4f, 0xbf, 0x99, 0xe1, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x83, 0x5e, 0x37, 0x0c,
	0x46, 0x03, 0x00, 0x00,
}
